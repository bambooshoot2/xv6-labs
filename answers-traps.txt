1.  哪些寄存器储存了函数的参数？例如，哪些寄存器存储了在主函数被调用的`printf`的参数13

    根据RISCV手册，a0-a7寄存器保存了函数的参数，在`printf`中，参数13被存储在a2寄存器中。

2.  主函数中对`f`和`g`的调用在哪里（提示：编译器可能会内联函数

   很显然，主函数中没有调用这两个函数，而是有编译器直接计算出调用结果12。

3.  printf函数位于哪个地址

   主函数中对`printf`间接寻址，其地址位于 `30 + 1536 = 0x630` 处。

4.  在jalr跳转至主函数的printf时，寄存器ra中有什么值

`jalr offset(rd)`的功能为：`t =pc+4; pc=(x[rs1]+sext(offset))&~1; x[rd]=t`。
在使用`0x80000332 jalr -1298(ra)` 跳入`printf`后，`ra`的值为`0x80000332+4 = 0x80000336`。

5.  运行以下代码：

```C
	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
```

 输出是什么？上述输出是基于RISC-V为小端法的事实的。如果RISC-V为大端法，i应该被设置为什么，57616需要被改变吗？

上述代码输出为`HE110 World`。如果为大端法，i需要被更改为`0x726c6400`，57616不需要被改变，硬件会处理具体的存储和读取方式。

6.  在下面的代码中，会打印 `'y='`什么？为什么会发生这种情况？

```C
	printf("x=%dy=%d", 3);
```
会打印出 `a2` 寄存器当前的值，因为在调用 `printf` 时，并未给 `a2` 寄存器赋值，但在`printf`被执行的时候却无法检查当前 `a2` 中的值是否为用户传入的值，
而只是单纯的对其进行打印。